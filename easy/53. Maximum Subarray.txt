#1//分治法
int SubArray(vector<int>& nums,int left,int right)
    {
        if(left==right)
            return nums[left];
        int centre=(left+right)/2;
        int leftMax=SubArray(nums,left,centre);
        int rightMax=SubArray(nums,centre+1,right);
        
        int leftBoard=nums[centre];
        int leftBoardMax=nums[centre];
        for(int i=centre-1;i>=left;--i)
        {
            leftBoard=leftBoard+nums[i];
            if(leftBoard>leftBoardMax)
                leftBoardMax=leftBoard;
        }
        int rightBoard=nums[centre+1];
        int rightBoardMax=nums[centre+1];
        for(int i=centre+2;i<=right;++i)
        {
            rightBoard=rightBoard+nums[i];
            if(rightBoard>rightBoardMax)
                rightBoardMax=rightBoard;
        }
        int centreMax=rightBoardMax+leftBoardMax;
        
        if(leftMax<rightMax)
        {
            leftMax=rightMax;
        }
        if(leftMax<centreMax)
        {
            leftMax=centreMax;
        }
        return leftMax;
        
    }
    
    int maxSubArray(vector<int>& nums) {
       return SubArray(nums,0,nums.size()-1);
    }
#2//动态规划
    int maxSubArray(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int sum=0;
        int max=nums[0];
        for(int i=0;i<nums.size();++i)
        {
            sum=sum+nums[i];
            if(max<sum)
                max=sum;
            if(sum<0)
                sum=0;
        }
        return max;
    }