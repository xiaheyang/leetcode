/*7.超时分治法
    int resulttwo(vector<int>& height,int left,int right)
    {
        if(right-left==1)
        {
            if(height[left]>height[right])
            {
                return height[right];                
            }
            else
            {
                return height[left]; 
            }  
        }
            
        int center=(left+right)/2;
        int resultleft=resulttwo(height,left,center);
        int resultright=resulttwo(height,center,right);
        
        int resultcenter=0;
        for(int i=0;i<center;++i)
        {
            for(int j=height.size()-1;j>center;--j)
            {
                if(height[j]>=height[i])
                {
                    if(resultcenter<height[i]*(j-i))
                    {
                        resultcenter=height[i]*(j-i);
                        break;
                    } 
                }
                else
                {
                    if(resultcenter<height[j]*(j-i))
                    {
                        resultcenter=height[j]*(j-i);
                    } 
                }
            }
        }
        
        if(resultleft<resultright)
        {
            resultleft=resultright;
        }
        if(resultleft<resultcenter)
        {
            resultleft=resultcenter;
        }
        return resultleft;
    }
*/
    int maxArea(vector<int>& height) {
/*2.题意理解错误
        int max=0;
        for(int i=1;i<height.size();++i)
        {
            if(height[i]>height[i-1])//1.else、if的括号省错了
            {
                if(height[i-1]>max)
                {
                    max=height[i-1];
                }
            }
            else
            {
                if(height[i]>max)
                {
                    max=height[i];
                }
            }
        }
        return max;
*/
/*6.超时暴力搜索
        int max=0;
        for(int i=0;i<height.size();++i)
        {
            for(int j =height.size()-1;j>i;--j)
            {
                if(height[j]>=height[i])
                {
                    if(max<height[i]*(j-i))//4.忘记比较
                    {
                        max=height[i]*(j-i);
                        break;
                    } 
                }
                else//3.条件考虑不周
                {
                    if(max<height[j]*(j-i))//5.边界反了
                    {
                        max=height[j]*(j-i);
                    } 
                }
            }
        }
        return max;
*/
//        return resulttwo(height,0,height.size()-1);
//8.大概是贪心算法(双指针)
        int max=0;
        for(int i=0,j=height.size()-1;i!=j;)
        {
            if(height[j]>=height[i])
            {
                if(max<height[i]*(j-i))
                {
                    max=height[i]*(j-i);
                } 
                ++i;
            }
            else
            {
                if(max<height[j]*(j-i))
                {
                    max=height[j]*(j-i);
                } 
                --j;
            }
        }
        return max; 
    }