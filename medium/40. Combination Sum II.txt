#1
   void combinationSum2half(vector<int>& candidates, int target,int begin,vector<int>& oneresult,vector<vector<int> >& result) {
       if(target==0)
       {
           // if(result.size()==0)//4.[4,2,5,2,5,3,1,5,2,2]9
           // {
           //     result.push_back(oneresult); 
           // }
           // else if(oneresult!=result[result.size()-1])//3.第一个元素出错
           // {
           //     result.push_back(oneresult);            
           // }
           result.push_back(oneresult);
           return;
       }
       if(begin>candidates.size()-1)
       {
           return;
       }
       if(target<candidates[begin])//**溢出
       {
           return;
       }
       
       for(int i=begin;i<candidates.size();++i)//1.有重复元素会出现重复选项
       {
           if(i!=0)
           {
               if(oneresult.size()==0)//**溢出
               {
                   while(candidates[i]==candidates[i-1])
                   {
                        ++i;
                       if(i>=candidates.size())
                       {
                           return;
                       }

                   }
               }
               else
               {
                   while(candidates[i]==candidates[i-1]&&oneresult[oneresult.size()-1]!=candidates[i])//2.(2,2,2)4出错**考虑第一个元素
                   {
                        ++i;
                       if(i>=candidates.size())
                       {
                           return;
                       }

                   }
               }
               
               while(candidates[begin]==candidates[i]&&i-begin>0)//**考虑第二元素以后**溢出
               {
                   ++i;
                   if(i>=candidates.size())
                   {
                       return;
                   }
               }
           }
           
           oneresult.push_back(candidates[i]);
           combinationSum2half(candidates,target-candidates[i],i+1,oneresult,result);
           oneresult.pop_back();
       }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int> > result;
        vector<int> oneresult;
        sort(candidates.begin(),candidates.end());
        combinationSum2half(candidates,target,0,oneresult,result);
        return result;
    }